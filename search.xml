<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaSenior之多线程</title>
      <link href="/2021/08/07/javasenior-zhi-duo-xian-cheng/"/>
      <url>/2021/08/07/javasenior-zhi-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="javaSenior学习"><a href="#javaSenior学习" class="headerlink" title="javaSenior学习"></a>javaSenior学习</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>[TOC]</p><h2 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210801204348309.png" alt="image-20210801204348309" style="zoom:150%;" /><h3 id="2-创建线程"><a href="#2-创建线程" class="headerlink" title="2.创建线程"></a>2.创建线程</h3><h4 id="2-1-方式一继承Thread"><a href="#2-1-方式一继承Thread" class="headerlink" title="2.1 方式一继承Thread"></a>2.1 方式一继承Thread</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 多线程的创建方法一：继承Thread类* 1.创建一个继承与Thread类的子类* 2.重写run()方法-->将此线程执行的操作声明在run方法中* 3.创建Thread子类的对象* 4.通过此对象调用start() ①启动当前线程②调用当前线程的run（）    >MyThread myThread = new MyThread();        //不能通过直接调run()方法来调用线程        myThread.start();*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-实现Runnable接口"><a href="#2-2-实现Runnable接口" class="headerlink" title="2.2 实现Runnable接口"></a>2.2 实现Runnable接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** 创建多线程的方式二：实现runnable接口 * 1.创建一个实现了Runnable接口的类 * 2.实例类去实现抽象run方法 * 3.创建实现类的对象 * 4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象 * 5.通过Thread类的对象调用start（）    > MThread mThread = new MThread();        Thread t1=new Thread(mThread);        t1.setName("线程1");        t1.start();*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>比较这两种线程创建方式：<br> 开发中，优先选择实现接口的方式，没有单继承的局限性<br> 更适合来处理多个线程共享数据的情况</p><p>两种方式都需要重写run方法 将线程要执行的逻辑声明在run方法中</p></blockquote><h4 id="2-3-方式三实现Callable接口"><a href="#2-3-方式三实现Callable接口" class="headerlink" title="2.3 方式三实现Callable接口"></a>2.3 方式三实现Callable接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**JDK5.0 方式三：实现Callable接口**1.创建一个实现Callable的实现类*2.将此线程需要执行的操作放在call()方法中*3.创建Callable接口实现类的对象*4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask对象*5.如果FutureTask对象作为参数传递到Thread类的构造器中，创建Thread对象调用START()*6.用get方法获取Callable中返回的值****/</span><span class="token class-name">Callable</span>接口创建多线程给要比<span class="token class-name">Runnable</span>强大？  <span class="token number">1.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法可以有返回值  <span class="token number">2.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法可以抛出异常  <span class="token number">3.</span>Callable支持泛型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-方式四-线程池"><a href="#2-4-方式四-线程池" class="headerlink" title="2.4 方式四 线程池"></a>2.4 方式四 线程池</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.提供指定数量的线程池</span>      <span class="token class-name">ExecutorService</span> executorService<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2.执行指定的线程的操作，需要提供实现Runnable接口或Callable接口的实现类的对象</span>      <span class="token class-name">NumberThread</span> numberThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">NumberThread1</span> numberThread1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>numberThread1<span class="token punctuation">)</span><span class="token punctuation">;</span>      executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适用于Runnable</span>        <span class="token comment">//3.关闭线程池</span>                executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//      executorService.submit(Callable callable);//适合于Callable</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Thread类的方法"><a href="#3-Thread类的方法" class="headerlink" title="3.Thread类的方法"></a>3.Thread类的方法</h3><p><img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210802094525372.png" alt="image-20210802094525372"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 常用方法* 1.start():启动当前线程，调用当前run()* 2.run()：通常需要重写Thread类的方法，将创建线程要执行的方法写在这里* 3.currentThread：静态方法，返回当前执行代码的线程* 4.getName():获取当前线程名字* 5.setName（）：设置当前线程的名字* 6.yield():释放当前cpu的执行权* 7.join():被另一个线程插队 在线程A中调用线程B 此时线程A进入阻塞状态，直到线程B完全执行之后，线程A才结束阻塞* 8.stop（）不建议使用* 9.sleep() ：让当前线程“睡眠”指定的milltime毫秒，在睡眠时间内，当前线程是阻塞状态* 10.isAlive()：判断线程是否活着*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-线程的调度"><a href="#4-线程的调度" class="headerlink" title="4.线程的调度"></a>4.线程的调度</h3><ul><li>线程的优先级：</li><li>MAX_PRIORITY:10</li><li>MIN_PRIORITY:1</li><li>NORM_PRIORITY:5-默认优先级</li><li></li><li></li><li>如何设置当前线程的优先级：</li><li>getPriority()</li><li>setPriority(int p)</li><li>说明 ：高优先级的线程要抢占低优先级的执行权，但只是从概率上讲 。</li></ul><h3 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5.线程的生命周期"></a>5.线程的生命周期</h3><p>Thread.state</p><p>状态：</p><ul><li>新建</li><li>就绪</li><li>运行</li><li>阻塞</li><li>死亡</li></ul><p><img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210802120625089.png" alt="image-20210802120625089"></p><h3 id="6-线程的同步"><a href="#6-线程的同步" class="headerlink" title="6.线程的同步"></a>6.线程的同步</h3><p>多个线程执行的不确定性引起执行结果的不稳定</p><p>多个线程对数据的共享，会造成操作的不完整性，会破坏数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  例子：创建三个窗口卖票，总票数是100张，使用方式二实现的**  1.问题：卖票过程中出现了重票 错票-->出现了线程的安全问题*  2.问题的出现原因：*     当某个线程擦操作车票的过程中，尚未完成操作时，其他线程也参与进来*  3.当一个线程在操作车票时 其他线程不能参与进来，直到线程a操作完车票时 其他线程才可以开始操作Ticket*     这种情况即使线程a阻塞了也没关系*  4.在Java中 我们通过同步机制来解决线程的安全问题**  方式一：同步代码块*      synchronized&#123;同步监视器&#125;&#123;*          //需要被同步的代码*      &#125;*  说明：操作总共享数据的代码，即为需要被同步的代码*   同步监视器：俗称 锁 任何一个类的对象都可以充当锁*      要求：多个线程必须要公用同一把锁*    补充:在实现Runnable接口创建多线程的时候，可以使用this做监视器**  方式二：同步方法*    如果操作共享数据的代码完整的声明在一个方法中，我们不妨将方法声明为同步的*****  5.同步的方式：解决了线程的安全问题---好处*  操作同步代码时 只能有一个线程参与，效率低*****使用继承实现多线程的时候 同步监视器要慎用this  可能创建多个对象***/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同步代码块-->解决实现类多线程安全</span><span class="token keyword">class</span> window1 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//synchronized(this)正确</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":卖票，票号为"</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同步代码块-->继承多线程安全问题</span><span class="token keyword">class</span> window <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//    private static Object obj=new Object();</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//window.class只会加载一次</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为"</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同步方法解决实现 多线程安全问题private synchronized void show()&#123;//同步监视器:this    if (ticket>0)&#123;        try &#123;            Thread.sleep(100);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.println(Thread.currentThread().getName()+":卖票，票号为"+ticket);        ticket--;    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同步方法解决继承类多线程安全问题private static synchronized void show()&#123;    if (ticket > 0) &#123;        try &#123;            Thread.sleep(100);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.println(currentThread().getName() + ":卖票，票号为" + ticket);        ticket--;    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于同步方法的总结：</p><p>1.同步方法仍然涉及到同步监视器，只是不需要我们显式的声明</p><p>2.非静态的同步方法：同步监视器都是：this</p><p>​    静态的同步方法：同步监视器式：当前类本身</p><h4 id="6-1线程安全的单例模式-懒汉式"><a href="#6-1线程安全的单例模式-懒汉式" class="headerlink" title="6.1线程安全的单例模式-懒汉式"></a>6.1线程安全的单例模式-懒汉式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//方式一：效率比骄差    public static Bank getInstance() &#123;//      synchronized (Bank.class)&#123;//          if (instance==null)&#123;//              instance=new Bank();//          &#125;//          return instance;//      &#125;// 方式二        if (instance == null) &#123;            synchronized (Bank.class) &#123;                if (instance == null) &#123;                    instance = new Bank();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-2-JDK5-0新特性之Lock"><a href="#6-2-JDK5-0新特性之Lock" class="headerlink" title="6.2 JDK5.0新特性之Lock"></a>6.2 JDK5.0新特性之Lock</h4><p>lock  unlock</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//lock锁 实例化一个lock    private ReentrantLock lock=new ReentrantLock(true);    @Override    public void run() &#123;        while (true)&#123;            try &#123;                lock.lock();                if (ticket>0)&#123;                    try &#123;                        Thread.sleep(100);                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    System.out.println(Thread.currentThread().getName()+":卖票，票号为"+ticket);                    ticket--;                &#125;else &#123;                    break;                &#125;            &#125;finally &#123;                //释放锁                lock.unlock();            &#125;        &#125;    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-死锁"><a href="#7-死锁" class="headerlink" title="7.死锁"></a>7.死锁</h3><p>  理解：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>  出现死锁后，所有线程都处于阻塞状态。</p><h3 id="8-线程的通信"><a href="#8-线程的通信" class="headerlink" title="8.线程的通信"></a>8.线程的通信</h3><pre class="line-numbers language-none"><code class="language-none">通信涉及到三个方法（必须在synchronized代码块或者同步方法中）wait()：一旦执行此方法，当前线程进入阻塞状态，并释放同步监视器notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程wait 就唤醒优先级高的notifyAll()：一旦执行此方法，就会唤醒所有wait的线程这三个方法的调用者必须是同步代码块或者tong&#39;bu&#39;fnag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-将懒汉式改写成线程安全的"><a href="#9-将懒汉式改写成线程安全的" class="headerlink" title="9.将懒汉式改写成线程安全的"></a>9.将懒汉式改写成线程安全的</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Bank</span> bank<span class="token operator">=</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  bank<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//方式一：效率比较差    public static Bank getInstance() &#123;//      synchronized (Bank.class)&#123;//          if (instance==null)&#123;//              instance=new Bank();//          &#125;//          return instance;//      &#125;// 方式二        if (instance == null) &#123;            synchronized (Bank.class) &#123;                if (instance == null) &#123;                    instance = new Bank();                &#125;            &#125;        &#125;        return instance;    &#125;    public void method() &#123;        System.out.println("单例 懒汉式");    &#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-Volatile关键字"><a href="#10-Volatile关键字" class="headerlink" title="10.Volatile关键字"></a>10.Volatile关键字</h3><p>主要在属性上使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaSenior之多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2021/08/07/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2021/08/07/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="javaSenior学习"><a href="#javaSenior学习" class="headerlink" title="javaSenior学习"></a>javaSenior学习</h1></li></ul><h2 id="1-String-类"><a href="#1-String-类" class="headerlink" title="1. String 类"></a>1. String 类</h2><p> ​      </p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * String声明为Final的 不可被继承 * String实现了Serializable接口:表示字符串是支持序列化的 *       实现了Comparable接口：表示String可以比较大小 * String内部定义了final char[] value 用于存储字符串数据 * String代表不可变的字符序列  简称：不可变性 * * */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 字符串的特性：</p><p>  常量和常量的拼接结果在常量池，且常量池中不会存在相同内容的常量</p><p> 只要其中有一个是变量，结果就在堆中</p><p> 如果拼接的结果调用intern()方法，返回值就在常量池中</p><p> <img src="D:\hexodown\blog\source_posts\我的第一篇博客\01.png" alt="01"></p><h2 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h2><p> <strong>int length()</strong></p><p> <strong>char charAt(int index)</strong> 返回索引处的字符return  value[index];</p><p> <strong>boolean isEmpty()</strong> 判断是否为空 </p><p> **String toLowerCase():**将所有字符转换为小写</p><p> <strong>String toUpperCase()：</strong>将所有字符转换为大写</p><p> <strong>String trim()</strong> 返回字符串的副本，忽略前导空白和尾部空白</p><p> <strong>boolean equalsIgnoreCase</strong>   :忽略大小写比较</p><p> **Sting concat(String str):**将指定字符串连接到此字符串的结尾 等价于“+”</p><p> <strong>int compareTo</strong>:比较两个字符串的大小</p><p> <strong>String substring(int beginIndex)</strong>:返回一个新的字符串,它是此字符串从beginIndex开始截取的</p><p> **String substring(int beginIndex，int endIndex)**：截取beginIndex到endIndex     前闭后开[beginindex,endindex）</p><p> <img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210805105839257.png" alt="image-20210805105839257"></p><p> <img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210805111545802.png" alt="image-20210805111545802"></p><h2 id="3-string转换"><a href="#3-string转换" class="headerlink" title="3.string转换"></a>3.string转换</h2> <pre class="line-numbers language-none"><code class="language-none">* String--&gt;char[]型数组的转换：调用toCharArray;*char[]型数组--&gt;String；调用String的构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210805115704891.png" alt="image-20210805115704891"></p><hr><h2 id="4-String-StringBuffer-StringBuilder的异同"><a href="#4-String-StringBuffer-StringBuilder的异同" class="headerlink" title="4.String StringBuffer StringBuilder的异同"></a>4.String StringBuffer StringBuilder的异同</h2><p> String   不可变的</p><p> StringBuffer  可变的 线程安全的但是效率较低</p><p> StringBuilder 可变的  线程不安全的 效率高  需要扩容  扩为原容量*2+2；</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value=new char[0];</span><span class="token class-name">StringBuffer</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// char[] value=new char[]&#123;'a,'b,'c'&#125;</span><span class="token class-name">StringBuilder</span> s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value=new char[16] 底层创建了一个长度是16的数组</span>s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[0]='a';</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StringBuffer-StringBuilder的方法"><a href="#StringBuffer-StringBuilder的方法" class="headerlink" title="StringBuffer StringBuilder的方法"></a>StringBuffer StringBuilder的方法</h3><p> <img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210805181343681.png" alt="image-20210805181343681"></p><p> <img src="C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20210805181414591.png" alt="image-20210805181414591"></p><h2 id="5-Date-Time-JDK8之前"><a href="#5-Date-Time-JDK8之前" class="headerlink" title="5. Date Time JDK8之前"></a>5. Date Time JDK8之前</h2> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * java.util.Date * * * ->1两个构造器的使用 *    1.1空参 Date() 当前时间 *    1.2 * * ->2两个方法的使用 *    toString() *    getTime()      日期时间API * 日期时间：System类的currentTimeMillis() *  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * * //SimpleDateFormat的使用 ：对日期Date类的格式化和解析 * * 1操作： *    1.1格式化：日期-->字符串 *    1.2解析 字符串-->日期 * * 2.SimpleDateFormat的实例化 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> SimpleDateFormat</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//实例化 无参构造器</span>    <span class="token class-name">SimpleDateFormat</span> simpleDateFormat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//格式化：format</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> format<span class="token operator">=</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析 字符串-->日期</span>    <span class="token comment">//要求符合格式 不然会抛出异常</span>    <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"21-8-5 下午11:45"</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> parse <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//************************有参构造器</span>    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MMM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> format1<span class="token operator">=</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 日历类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//计算指定日期到指定日期之间的总天数  日历类</span>    <span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//常用方法1.get()</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.set()</span>    instance<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.add()</span>    instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.getTime()  日历类--Date</span>    <span class="token class-name">Date</span> time <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.setTime()</span>    <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Date-Time-JDK8之后"><a href="#6-Date-Time-JDK8之后" class="headerlink" title="6.Date Time JDK8之后"></a>6.Date Time JDK8之后</h2><p> p484时间</p><h2 id="7-比较器"><a href="#7-比较器" class="headerlink" title="7.比较器"></a>7.比较器</h2><p> comparable接口</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 一.Java中的对象 对对象进行排序*   接口 comparable comparator*   1.像String 包装类 等实现了Comparable接口，重写了compareTo方法，给出了比较两个对象大小的方法*   2.重写compareTo()的规则：*      当前对象this大于形参对象obj 返回正整数*      当前对象this小于形参对象obj 返回负整数*      当前对象this等于形参对象obj 返回零*   3.对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo() 指明如何排序*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> comparator接口  临时</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 定制排序* 重写compare(Object o1 ,Object o2)方法，比较o1和o2的大小* 如果返回值是正整数，则表示o1大于o2* 如果返回0，表示相等，返回负整数，表示o1小于o2；*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 区别:  </p><p> Comparable接口的方式一旦一定，保证它的接口实现类的对象在任何位置都可以比较大小</p><p>  Comparator属于临时性的</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaSecior常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mystxt</title>
      <link href="/2021/08/07/mystxt/"/>
      <url>/2021/08/07/mystxt/</url>
      
        <content type="html"><![CDATA[<p>i am student</p><h2 id="sb"><a href="#sb" class="headerlink" title="sb"></a>sb</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/07/hello-world/"/>
      <url>/2021/08/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
